name: Deploy Flask App to AWS

on:
  push:
    branches:
      - master  # Запуск при пуше в ветку master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code  # Чекаут кода из репозитория
      uses: actions/checkout@v3

    - name: Setup SSH  # Настройка SSH для подключения к AWS
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Deploy to AWS  # Обновление и перезапуск приложения на сервере
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.AWS_USER }}@${{ secrets.AWS_HOST }} << 'EOF'
        set -e

        echo "==== Updating server packages ===="
        sudo apt update -y

        echo "==== Checking and Installing Python3, venv, pip ===="
        if ! command -v python3 &> /dev/null; then
          echo "Python3 not found. Installing..."
          sudo apt install -y python3
        fi

        if ! dpkg -l | grep -q python3-venv; then
          echo "Python3-venv not found. Installing..."
          sudo apt install -y python3-venv
        fi

        if ! command -v pip3 &> /dev/null; then
          echo "Pip3 not found. Installing..."
          sudo apt install -y python3-pip
        fi

        echo "==== Checking App Directory ===="
        if [ -d "${{ secrets.APP_DIR }}" ]; then
          echo "==== Directory exists. Cloning not required ===="
        else
          echo "==== Directory not found. Cloning the repository ===="
          git clone ${{ secrets.REPO_URL }} ${{ secrets.APP_DIR }}
        fi

        cd ${{ secrets.APP_DIR }}

        echo "==== Fetching latest changes ===="
        git fetch --all

        echo "==== Resetting local changes ===="
        git reset --hard origin/master

        echo "==== Creating and Activating Virtual Environment ===="
        if [ ! -d "venv" ]; then
          python3 -m venv venv
        fi
        source venv/bin/activate

        echo "==== Installing Dependencies ===="
        pip install -r requirements.txt

        echo "==== Stopping old process ===="
        pkill -f "python app.py" || true

        echo "==== Starting new process ===="
        nohup python app.py > flask.log 2>&1 &
        echo "==== Deployment complete! ===="
        EOF
